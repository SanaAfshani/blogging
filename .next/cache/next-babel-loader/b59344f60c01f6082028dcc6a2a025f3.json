{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createQuery } from \"react-query-kit\";\nimport axios from \"axios\";\nexport var usePosts = createQuery({\n  primaryKey: \"https://jsonplaceholder.typicode.com/posts\",\n  queryFn: function () {\n    var _queryFn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var _ref$queryKey, url, variables, page, limit, response;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref$queryKey = _slicedToArray(_ref.queryKey, 2), url = _ref$queryKey[0], variables = _ref$queryKey[1];\n              page = variables.page;\n              limit = 10;\n              _context.prev = 3;\n              _context.next = 6;\n              return axios.get(\"\".concat(url, \"?_page=\").concat(page, \"&_limit=\").concat(limit));\n\n            case 6:\n              response = _context.sent;\n              return _context.abrupt(\"return\", response.data);\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](3);\n              throw new Error(\"Error fetching data: \" + _context.t0.message);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 10]]);\n    }));\n\n    function queryFn(_x) {\n      return _queryFn.apply(this, arguments);\n    }\n\n    return queryFn;\n  }()\n});","map":{"version":3,"sources":["/Users/macbook/Documents/blog/services/posts.ts"],"names":["createQuery","axios","usePosts","primaryKey","queryFn","queryKey","url","variables","page","limit","get","response","data","Error","message"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,iBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,IAAMC,QAAQ,GAAGF,WAAW,CAGjC;AACEG,EAAAA,UAAU,EAAE,4CADd;AAEEC,EAAAA,OAAO;AAAA,4EAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kDAASC,QAAT,MAAoBC,GAApB,qBAAyBC,SAAzB;AACGC,cAAAA,IADH,GACYD,SADZ,CACGC,IADH;AAECC,cAAAA,KAFD,GAEU,EAFV;AAAA;AAAA;AAAA,qBAKsBR,KAAK,CAACS,GAAN,WAAaJ,GAAb,oBAA0BE,IAA1B,qBAAyCC,KAAzC,EALtB;;AAAA;AAKKE,cAAAA,QALL;AAAA,+CAMMA,QAAQ,CAACC,IANf;;AAAA;AAAA;AAAA;AAAA,oBAQK,IAAIC,KAAJ,CAAU,0BAA0B,YAAMC,OAA1C,CARL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAFT,CAHiC,CAA5B","sourcesContent":["import { createQuery } from \"react-query-kit\";\nimport axios from \"axios\";\nimport {IPosts} from \"~/types/static\";\n\nexport const usePosts = createQuery<\n    IPosts[],\n    { page: number }\n>({\n    primaryKey: \"https://jsonplaceholder.typicode.com/posts\",\n    queryFn: async ({ queryKey: [url, variables] }) => {\n        const { page } = variables;\n        const limit =  10;\n\n        try {\n            const response = await axios.get(`${url}?_page=${page}&_limit=${limit}`);\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Error fetching data: \" + error.message);\n        }\n\n    }\n});\n"]},"metadata":{},"sourceType":"module"}