{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport default function useMedia(breakPoint) {\n  // checking window object to support server side rendering.\n  const {\n    0: isMobileOrTablet,\n    1: setIsMobileOrTablet\n  } = useState(false ? window.innerWidth <= breakPoint : false);\n  useEffect(() => {\n    function screenResized() {\n      // To make sure that the state is only being updated when it has to be\n      // If its a mobile screen, i dont care how smaller it becomes.\n      // If its a desktop screen i dont care how larger it becomes.\n      if (isMobileOrTablet && window.innerWidth > breakPoint) {\n        setIsMobileOrTablet(false);\n      } else if (!isMobileOrTablet && window.innerWidth <= breakPoint) {\n        setIsMobileOrTablet(true);\n      }\n    }\n\n    window.addEventListener('resize', screenResized); // to remove the event listener when this component is unmounted.\n\n    return () => window.removeEventListener('resize', screenResized);\n  }, [isMobileOrTablet]); // the return value should be true or false\n\n  return isMobileOrTablet;\n}","map":{"version":3,"sources":["/Users/macbook/Documents/blog/hooks/useMedia.tsx"],"names":["useState","useEffect","useMedia","breakPoint","isMobileOrTablet","setIsMobileOrTablet","window","innerWidth","screenResized","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,QAAT,CAAkBC,UAAlB,EAAsC;AACpD;AACA,QAAM;AAAA,OAACC,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CL,QAAQ,CACvD,QAAgCM,MAAM,CAACC,UAAP,IAAqBJ,UAArD,GAAkE,KADX,CAAxD;AAIAF,EAAAA,SAAS,CAAC,MAAM;AACf,aAASO,aAAT,GAAyB;AACxB;AACA;AACA;AACA,UAAIJ,gBAAgB,IAAIE,MAAM,CAACC,UAAP,GAAoBJ,UAA5C,EAAwD;AACvDE,QAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACA,OAFD,MAEO,IAAI,CAACD,gBAAD,IAAqBE,MAAM,CAACC,UAAP,IAAqBJ,UAA9C,EAA0D;AAChEE,QAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACA;AACD;;AACDC,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCD,aAAlC,EAXe,CAaf;;AACA,WAAO,MAAMF,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCF,aAArC,CAAb;AACA,GAfQ,EAeN,CAACJ,gBAAD,CAfM,CAAT,CANoD,CAuBpD;;AACA,SAAOA,gBAAP;AACA","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function useMedia(breakPoint: number) {\n\t// checking window object to support server side rendering.\n\tconst [isMobileOrTablet, setIsMobileOrTablet] = useState(\n\t\ttypeof window !== 'undefined' ? window.innerWidth <= breakPoint : false\n\t);\n\n\tuseEffect(() => {\n\t\tfunction screenResized() {\n\t\t\t// To make sure that the state is only being updated when it has to be\n\t\t\t// If its a mobile screen, i dont care how smaller it becomes.\n\t\t\t// If its a desktop screen i dont care how larger it becomes.\n\t\t\tif (isMobileOrTablet && window.innerWidth > breakPoint) {\n\t\t\t\tsetIsMobileOrTablet(false);\n\t\t\t} else if (!isMobileOrTablet && window.innerWidth <= breakPoint) {\n\t\t\t\tsetIsMobileOrTablet(true);\n\t\t\t}\n\t\t}\n\t\twindow.addEventListener('resize', screenResized);\n\n\t\t// to remove the event listener when this component is unmounted.\n\t\treturn () => window.removeEventListener('resize', screenResized);\n\t}, [isMobileOrTablet]);\n\n\t// the return value should be true or false\n\treturn isMobileOrTablet;\n}\n"]},"metadata":{},"sourceType":"module"}