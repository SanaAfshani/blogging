{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Documents/blog/pages/home.tsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useContext } from \"react\";\nimport { QueryClient } from \"react-query\";\nimport { dehydrate } from \"react-query/hydration\";\nimport { usePosts } from \"~/services/posts\";\nimport CenterContent from \"~/components/shared/center-content\";\nimport HomeCenterComponent from \"~/components/home-page/home-center-component\";\nimport { Context } from \"~/context/context\";\nconst POST_COUNT = 1;\n\nconst Home = () => {\n  const {\n    setAllPosts,\n    postCount,\n    setPostCount\n  } = useContext(Context);\n  const {\n    data,\n    isFetching\n  } = usePosts({\n    variables: {\n      page: postCount\n    }\n  });\n  const ref = useRef(null);\n\n  const handleIntersection = entries => {\n    const entry = entries[0];\n\n    if (entry.isIntersecting && !isFetching) {\n      setPostCount(prevCount => prevCount + 1);\n    }\n  };\n\n  useEffect(() => {\n    if (data) {\n      setAllPosts(prevPosts => [...prevPosts, ...data]);\n    }\n  }, [data]);\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: \"0px\",\n      threshold: 0.1\n    };\n    const observer = new IntersectionObserver(handleIntersection, options);\n\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => {\n      if (ref.current) {\n        observer.unobserve(ref.current);\n      }\n    };\n  }, [isFetching]);\n  return __jsx(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, __jsx(CenterContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, __jsx(HomeCenterComponent, {\n    childRef: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport async function getStaticProps() {\n  const queryClient = new QueryClient();\n  await queryClient.prefetchQuery(usePosts.getKey({\n    page: POST_COUNT\n  }), usePosts.queryFn);\n  console.log(queryClient);\n  return {\n    props: {\n      dehydratedState: dehydrate(queryClient)\n    },\n    unstable_revalidate: 60\n  };\n}\nexport default Home;","map":{"version":3,"sources":["/Users/macbook/Documents/blog/pages/home.tsx"],"names":["React","useRef","useEffect","useContext","QueryClient","dehydrate","usePosts","CenterContent","HomeCenterComponent","Context","POST_COUNT","Home","setAllPosts","postCount","setPostCount","data","isFetching","variables","page","ref","handleIntersection","entries","entry","isIntersecting","prevCount","prevPosts","options","root","rootMargin","threshold","observer","IntersectionObserver","current","observe","unobserve","getStaticProps","queryClient","prefetchQuery","getKey","queryFn","console","log","props","dehydratedState","unstable_revalidate"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,UAAlC,QAAmD,OAAnD;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,SAAR,QAAwB,uBAAxB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,OAAOC,aAAP,MAA0B,oCAA1B;AACA,OAAOC,mBAAP,MAAgC,8CAAhC;AAEA,SAAQC,OAAR,QAAsB,mBAAtB;AAGA,MAAMC,UAAU,GAAG,CAAnB;;AACA,MAAMC,IAAe,GAAG,MAAM;AAC1B,QAAM;AAAEC,IAAAA,WAAF;AAAcC,IAAAA,SAAd;AAAwBC,IAAAA;AAAxB,MAAyCX,UAAU,CAACM,OAAD,CAAzD;AACA,QAAM;AAACM,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAqBV,QAAQ,CAAC;AAChCW,IAAAA,SAAS,EAAE;AAACC,MAAAA,IAAI,EAAEL;AAAP;AADqB,GAAD,CAAnC;AAGA,QAAMM,GAAG,GAAGlB,MAAM,CAAwB,IAAxB,CAAlB;;AAEA,QAAMmB,kBAAkB,GAAIC,OAAD,IAA0C;AACjE,UAAMC,KAAK,GAAGD,OAAO,CAAC,CAAD,CAArB;;AACA,QAAIC,KAAK,CAACC,cAAN,IAAwB,CAACP,UAA7B,EAAyC;AACrCF,MAAAA,YAAY,CAAEU,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAZ;AACH;AACJ,GALD;;AAOAtB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIa,IAAJ,EAAU;AACNH,MAAAA,WAAW,CAAEa,SAAD,IAAe,CAAC,GAAGA,SAAJ,EAAe,GAAGV,IAAlB,CAAhB,CAAX;AACH;AACJ,GAJQ,EAIN,CAACA,IAAD,CAJM,CAAT;AAMAb,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMwB,OAAO,GAAG;AACZC,MAAAA,IAAI,EAAE,IADM;AAEZC,MAAAA,UAAU,EAAE,KAFA;AAGZC,MAAAA,SAAS,EAAE;AAHC,KAAhB;AAKA,UAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBX,kBAAzB,EAA6CM,OAA7C,CAAjB;;AAEA,QAAIP,GAAG,CAACa,OAAR,EAAiB;AACbF,MAAAA,QAAQ,CAACG,OAAT,CAAiBd,GAAG,CAACa,OAArB;AACH;;AAED,WAAO,MAAM;AACT,UAAIb,GAAG,CAACa,OAAR,EAAiB;AACbF,QAAAA,QAAQ,CAACI,SAAT,CAAmBf,GAAG,CAACa,OAAvB;AACH;AACJ,KAJD;AAMH,GAlBQ,EAkBN,CAAChB,UAAD,CAlBM,CAAT;AAoBA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,mBAAD;AAAqB,IAAA,QAAQ,EAAEG,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CADJ;AAOH,CA/CD;;AAiDA,OAAO,eAAegB,cAAf,GAAgC;AACnC,QAAMC,WAAW,GAAG,IAAIhC,WAAJ,EAApB;AAEA,QAAMgC,WAAW,CAACC,aAAZ,CACF/B,QAAQ,CAACgC,MAAT,CAAgB;AAACpB,IAAAA,IAAI,EAAER;AAAP,GAAhB,CADE,EAEFJ,QAAQ,CAACiC,OAFP,CAAN;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ;AACA,SAAO;AACHM,IAAAA,KAAK,EAAE;AACHC,MAAAA,eAAe,EAAEtC,SAAS,CAAC+B,WAAD;AADvB,KADJ;AAIHQ,IAAAA,mBAAmB,EAAE;AAJlB,GAAP;AAMH;AAED,eAAejC,IAAf","sourcesContent":["import React, {useRef, useEffect, useContext} from \"react\";\nimport {QueryClient} from \"react-query\";\nimport {dehydrate} from \"react-query/hydration\";\nimport {usePosts} from \"~/services/posts\";\nimport CenterContent from \"~/components/shared/center-content\";\nimport HomeCenterComponent from \"~/components/home-page/home-center-component\";\nimport {INextPage} from \"~/types/INextPage\";\nimport {Context} from \"~/context/context\";\nimport {ContextType} from \"~/types/static\";\n\nconst POST_COUNT = 1\nconst Home: INextPage = () => {\n    const { setAllPosts,postCount,setPostCount } = useContext(Context) as ContextType;\n    const {data, isFetching} = usePosts({\n        variables: {page: postCount},\n    });\n    const ref = useRef<HTMLDivElement | null>(null);\n\n    const handleIntersection = (entries: IntersectionObserverEntry[]) => {\n        const entry = entries[0];\n        if (entry.isIntersecting && !isFetching) {\n            setPostCount((prevCount) => prevCount + 1);\n        }\n    };\n\n    useEffect(() => {\n        if (data) {\n            setAllPosts((prevPosts) => [...prevPosts, ...data]);\n        }\n    }, [data]);\n\n    useEffect(() => {\n        const options = {\n            root: null,\n            rootMargin: \"0px\",\n            threshold: 0.1,\n        };\n        const observer = new IntersectionObserver(handleIntersection, options);\n\n        if (ref.current) {\n            observer.observe(ref.current);\n        }\n\n        return () => {\n            if (ref.current) {\n                observer.unobserve(ref.current);\n            }\n        };\n\n    }, [isFetching]);\n\n    return (\n        <main>\n            <CenterContent>\n                <HomeCenterComponent childRef={ref}/>\n            </CenterContent>\n        </main>\n    );\n};\n\nexport async function getStaticProps() {\n    const queryClient = new QueryClient();\n\n    await queryClient.prefetchQuery(\n        usePosts.getKey({page: POST_COUNT}),\n        usePosts.queryFn\n    );\n    console.log(queryClient)\n    return {\n        props: {\n            dehydratedState: dehydrate(queryClient),\n        },\n        unstable_revalidate: 60,\n    };\n}\n\nexport default Home;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}