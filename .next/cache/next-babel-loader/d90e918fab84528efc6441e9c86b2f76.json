{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nexport default function useMedia(breakPoint) {\n  _s();\n\n  // checking window object to support server side rendering.\n  var _useState = useState(true ? window.innerWidth <= breakPoint : false),\n      isMobileOrTablet = _useState[0],\n      setIsMobileOrTablet = _useState[1];\n\n  useEffect(function () {\n    function screenResized() {\n      // To make sure that the state is only being updated when it has to be\n      // If its a mobile screen, i dont care how smaller it becomes.\n      // If its a desktop screen i dont care how larger it becomes.\n      if (isMobileOrTablet && window.innerWidth > breakPoint) {\n        setIsMobileOrTablet(false);\n      } else if (!isMobileOrTablet && window.innerWidth <= breakPoint) {\n        setIsMobileOrTablet(true);\n      }\n    }\n\n    window.addEventListener('resize', screenResized); // to remove the event listener when this component is unmounted.\n\n    return function () {\n      return window.removeEventListener('resize', screenResized);\n    };\n  }, [isMobileOrTablet]); // the return value should be true or false\n\n  return isMobileOrTablet;\n}\n\n_s(useMedia, \"Sygq5AlTgRf8jq3ryLXHB3mfU10=\");","map":{"version":3,"sources":["/Users/macbook/Documents/blog/hooks/useMedia.tsx"],"names":["useState","useEffect","useMedia","breakPoint","window","innerWidth","isMobileOrTablet","setIsMobileOrTablet","screenResized","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,QAAT,CAAkBC,UAAlB,EAAsC;AAAA;;AACpD;AADoD,kBAEJH,QAAQ,CACvD,OAAgCI,MAAM,CAACC,UAAP,IAAqBF,UAArD,GAAkE,KADX,CAFJ;AAAA,MAE7CG,gBAF6C;AAAA,MAE3BC,mBAF2B;;AAMpDN,EAAAA,SAAS,CAAC,YAAM;AACf,aAASO,aAAT,GAAyB;AACxB;AACA;AACA;AACA,UAAIF,gBAAgB,IAAIF,MAAM,CAACC,UAAP,GAAoBF,UAA5C,EAAwD;AACvDI,QAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACA,OAFD,MAEO,IAAI,CAACD,gBAAD,IAAqBF,MAAM,CAACC,UAAP,IAAqBF,UAA9C,EAA0D;AAChEI,QAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACA;AACD;;AACDH,IAAAA,MAAM,CAACK,gBAAP,CAAwB,QAAxB,EAAkCD,aAAlC,EAXe,CAaf;;AACA,WAAO;AAAA,aAAMJ,MAAM,CAACM,mBAAP,CAA2B,QAA3B,EAAqCF,aAArC,CAAN;AAAA,KAAP;AACA,GAfQ,EAeN,CAACF,gBAAD,CAfM,CAAT,CANoD,CAuBpD;;AACA,SAAOA,gBAAP;AACA;;GAzBuBJ,Q","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function useMedia(breakPoint: number) {\n\t// checking window object to support server side rendering.\n\tconst [isMobileOrTablet, setIsMobileOrTablet] = useState(\n\t\ttypeof window !== 'undefined' ? window.innerWidth <= breakPoint : false\n\t);\n\n\tuseEffect(() => {\n\t\tfunction screenResized() {\n\t\t\t// To make sure that the state is only being updated when it has to be\n\t\t\t// If its a mobile screen, i dont care how smaller it becomes.\n\t\t\t// If its a desktop screen i dont care how larger it becomes.\n\t\t\tif (isMobileOrTablet && window.innerWidth > breakPoint) {\n\t\t\t\tsetIsMobileOrTablet(false);\n\t\t\t} else if (!isMobileOrTablet && window.innerWidth <= breakPoint) {\n\t\t\t\tsetIsMobileOrTablet(true);\n\t\t\t}\n\t\t}\n\t\twindow.addEventListener('resize', screenResized);\n\n\t\t// to remove the event listener when this component is unmounted.\n\t\treturn () => window.removeEventListener('resize', screenResized);\n\t}, [isMobileOrTablet]);\n\n\t// the return value should be true or false\n\treturn isMobileOrTablet;\n}\n"]},"metadata":{},"sourceType":"module"}