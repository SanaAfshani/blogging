import { useQueryClient, useInfiniteQuery, parseMutationArgs, useMutation, useQuery } from '@tanstack/react-query';

function createBaseQuery(options, hook) {
  const {
    primaryKey,
    queryFn,
    ...defaultOptions
  } = options;

  const getPrimaryKey = () => primaryKey;

  const getKey = variables => typeof variables === 'undefined' ? [primaryKey] : [primaryKey, variables];

  function useGeneratedQuery(options) {
    const {
      variables,
      ...restOptions
    } = options || {};
    const queryKey = getKey(variables);
    const {
      enabled,
      ...mergedOptions
    } = { ...defaultOptions,
      ...restOptions,
      queryFn,
      queryKey
    };
    const queryClient = useQueryClient({
      context: mergedOptions.context
    });

    const setData = (updater, options) => queryClient.setQueryData(queryKey, updater, options);

    const result = hook({ ...mergedOptions,
      enabled: typeof enabled === 'function' ? enabled(queryClient.getQueryData(queryKey)) : enabled
    });
    return Object.assign(result, {
      setData
    });
  }

  useGeneratedQuery.getPrimaryKey = getPrimaryKey;
  useGeneratedQuery.getKey = getKey;
  useGeneratedQuery.queryFn = queryFn;
  return useGeneratedQuery;
}

function parseQueryKitArgs(arg1, arg2, arg3) {
  if (typeof arg1 !== 'string') {
    return arg1;
  }

  if (typeof arg2 === 'function') {
    return { ...arg3,
      primaryKey: arg1,
      queryFn: arg2
    };
  }

  return { ...arg2,
    primaryKey: arg1
  };
}

function createInfiniteQuery(arg1, arg2, arg3) {
  const options = parseQueryKitArgs(arg1, arg2, arg3);
  return createBaseQuery(options, useInfiniteQuery);
}

function createMutation(arg1, arg2, arg3) {
  const defaultOptions = parseMutationArgs(arg1, arg2, arg3);

  const getKey = () => defaultOptions.mutationKey;

  function useGeneratedMutation(options) {
    return useMutation({ ...defaultOptions,
      ...options
    });
  }

  useGeneratedMutation.getKey = getKey;
  useGeneratedMutation.mutationFn = defaultOptions.mutationFn;
  return useGeneratedMutation;
}

function createQuery(arg1, arg2, arg3) {
  const options = parseQueryKitArgs(arg1, arg2, arg3);
  return createBaseQuery(options, useQuery);
}

export { createInfiniteQuery, createMutation, createQuery };
//# sourceMappingURL=index.js.map
