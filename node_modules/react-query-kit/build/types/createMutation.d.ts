import type { MutationFunction, MutationKey, UseMutationOptions, UseMutationResult } from '@tanstack/react-query';
export interface CreateMutationResult<TData = unknown, TError = unknown, TVariables = void> {
    <TContext>(options?: Omit<UseMutationOptions<TData, TError, TVariables, TContext>, 'mutationFn' | 'mutationKey'>): UseMutationResult<TData, TError, TVariables, TContext>;
    getKey: () => MutationKey | undefined;
    mutationFn: MutationFunction<TData, TVariables>;
}
export declare function createMutation<TData = unknown, TVariables = void, TError = unknown, TContext = unknown>(options: UseMutationOptions<TData, TError, TVariables, TContext>): CreateMutationResult<TData, TError, TVariables>;
export declare function createMutation<TData = unknown, TVariables = void, TError = unknown, TContext = unknown>(mutationFn: MutationFunction<TData, TVariables>, options?: Omit<UseMutationOptions<TData, TError, TVariables, TContext>, 'mutationFn'>): CreateMutationResult<TData, TError, TVariables>;
export declare function createMutation<TData = unknown, TVariables = void, TError = unknown, TContext = unknown>(mutationKey: MutationKey, options?: Omit<UseMutationOptions<TData, TError, TVariables, TContext>, 'mutationKey'>): CreateMutationResult<TData, TError, TVariables>;
export declare function createMutation<TData = unknown, TVariables = void, TError = unknown, TContext = unknown>(mutationKey: MutationKey, mutationFn?: MutationFunction<TData, TVariables>, options?: Omit<UseMutationOptions<TData, TError, TVariables, TContext>, 'mutationKey' | 'mutationFn'>): CreateMutationResult<TData, TError, TVariables>;
