import type { QueryFunction, SetDataOptions, UseQueryOptions, UseQueryResult } from '@tanstack/react-query';
import type { Updater } from '@tanstack/react-query/build/types/packages/query-core/src/utils';
import type { AdditionalCreateOptions, AdditionalQueryHookOptions, ExposeMethods, QueryKitKey } from './types';
interface CreateQueryOptions<TFnData, TVariables, Error> extends Omit<UseQueryOptions<TFnData, Error, unknown, QueryKitKey<TVariables>>, 'queryKey' | 'queryFn' | 'enabled' | 'select'>, AdditionalCreateOptions<TFnData, TVariables> {
}
declare type QueryHookOptions<TFnData, Error, TData, TVariables> = Omit<UseQueryOptions<TFnData, Error, TData, QueryKitKey<TVariables>>, 'queryKey' | 'queryFn' | 'enabled'> & AdditionalQueryHookOptions<TFnData, TVariables>;
interface QueryHook<TFnData, TVariables = void, Error = unknown> extends ExposeMethods<TFnData, TVariables> {
    <TData = TFnData>(options: TVariables extends void ? QueryHookOptions<TFnData, Error, TData, TVariables> | void : QueryHookOptions<TFnData, Error, TData, TVariables>): UseQueryResult<TData, Error> & {
        setData: (updater: Updater<TFnData | undefined, TFnData>, options?: SetDataOptions | undefined) => TFnData | undefined;
    };
}
export declare function createQuery<TFnData, TVariables = void, Error = unknown>(options: CreateQueryOptions<TFnData, TVariables, Error>): QueryHook<TFnData, TVariables, Error>;
export declare function createQuery<TFnData, TVariables = void, Error = unknown>(primaryKey: string, options?: Omit<CreateQueryOptions<TFnData, TVariables, Error>, 'primaryKey'>): QueryHook<TFnData, TVariables, Error>;
export declare function createQuery<TFnData, TVariables = void, Error = unknown>(primaryKey: string, queryFn: QueryFunction<TFnData, QueryKitKey<TVariables>>, options?: Omit<CreateQueryOptions<TFnData, TVariables, Error>, 'primaryKey' | 'queryFn'>): QueryHook<TFnData, TVariables, Error>;
export {};
