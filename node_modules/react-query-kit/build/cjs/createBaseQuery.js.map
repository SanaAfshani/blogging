{"version":3,"file":"createBaseQuery.js","sources":["../../src/createBaseQuery.ts"],"sourcesContent":["import type { SetDataOptions, UseBaseQueryOptions } from '@tanstack/react-query'\nimport { useQueryClient } from '@tanstack/react-query'\nimport type { Updater } from '@tanstack/react-query/build/types/packages/query-core/src/utils'\nimport type {\n  AdditionalCreateOptions,\n  AdditionalQueryHookOptions,\n} from './types'\n\ninterface CreateQueryOptions\n  extends Omit<\n      UseBaseQueryOptions,\n      'queryKey' | 'queryFn' | 'enabled' | 'select'\n    >,\n    AdditionalCreateOptions<any, any> {}\n\ntype QueryBaseHookOptions = Omit<\n  UseBaseQueryOptions,\n  'queryKey' | 'queryFn' | 'enabled'\n> &\n  AdditionalQueryHookOptions<any, any>\n\nexport function createBaseQuery(\n  options: CreateQueryOptions,\n  hook: (options: any) => any\n): any {\n  const { primaryKey, queryFn, ...defaultOptions } = options\n\n  const getPrimaryKey = () => primaryKey\n\n  const getKey = (variables?: any) =>\n    typeof variables === 'undefined' ? [primaryKey] : [primaryKey, variables]\n\n  function useGeneratedQuery(options?: QueryBaseHookOptions) {\n    const { variables, ...restOptions } = options || {}\n\n    const queryKey = getKey(variables)\n\n    const { enabled, ...mergedOptions } = {\n      ...defaultOptions,\n      ...restOptions,\n      queryFn,\n      queryKey,\n    }\n\n    const queryClient = useQueryClient({ context: mergedOptions.context })\n\n    const setData = (updater: Updater<any, any>, options?: SetDataOptions) =>\n      queryClient.setQueryData(queryKey, updater, options)\n\n    const result = hook({\n      ...mergedOptions,\n      enabled:\n        typeof enabled === 'function'\n          ? enabled(queryClient.getQueryData(queryKey))\n          : enabled,\n    })\n\n    return Object.assign(result, { setData })\n  }\n\n  useGeneratedQuery.getPrimaryKey = getPrimaryKey\n  useGeneratedQuery.getKey = getKey\n  useGeneratedQuery.queryFn = queryFn\n\n  return useGeneratedQuery\n}\n"],"names":["createBaseQuery","options","hook","primaryKey","queryFn","defaultOptions","getPrimaryKey","getKey","variables","useGeneratedQuery","restOptions","queryKey","enabled","mergedOptions","queryClient","useQueryClient","context","setData","updater","setQueryData","result","getQueryData","Object","assign"],"mappings":";;;;;;AAqBO,SAASA,eAAT,CACLC,OADK,EAELC,IAFK,EAGA;EACL,MAAM;IAAEC,UAAF;IAAcC,OAAd;IAAuB,GAAGC,cAAAA;AAA1B,GAAA,GAA6CJ,OAAnD,CAAA;;EAEA,MAAMK,aAAa,GAAG,MAAMH,UAA5B,CAAA;;AAEA,EAAA,MAAMI,MAAM,GAAIC,SAAD,IACb,OAAOA,SAAP,KAAqB,WAArB,GAAmC,CAACL,UAAD,CAAnC,GAAkD,CAACA,UAAD,EAAaK,SAAb,CADpD,CAAA;;EAGA,SAASC,iBAAT,CAA2BR,OAA3B,EAA2D;IACzD,MAAM;MAAEO,SAAF;MAAa,GAAGE,WAAAA;KAAgBT,GAAAA,OAAO,IAAI,EAAjD,CAAA;AAEA,IAAA,MAAMU,QAAQ,GAAGJ,MAAM,CAACC,SAAD,CAAvB,CAAA;IAEA,MAAM;MAAEI,OAAF;MAAW,GAAGC,aAAAA;KAAkB,GAAA,EACpC,GAAGR,cADiC;AAEpC,MAAA,GAAGK,WAFiC;MAGpCN,OAHoC;AAIpCO,MAAAA,QAAAA;KAJF,CAAA;IAOA,MAAMG,WAAW,GAAGC,yBAAc,CAAC;MAAEC,OAAO,EAAEH,aAAa,CAACG,OAAAA;AAAzB,KAAD,CAAlC,CAAA;;AAEA,IAAA,MAAMC,OAAO,GAAG,CAACC,OAAD,EAA6BjB,OAA7B,KACda,WAAW,CAACK,YAAZ,CAAyBR,QAAzB,EAAmCO,OAAnC,EAA4CjB,OAA5C,CADF,CAAA;;AAGA,IAAA,MAAMmB,MAAM,GAAGlB,IAAI,CAAC,EAClB,GAAGW,aADe;AAElBD,MAAAA,OAAO,EACL,OAAOA,OAAP,KAAmB,UAAnB,GACIA,OAAO,CAACE,WAAW,CAACO,YAAZ,CAAyBV,QAAzB,CAAD,CADX,GAEIC,OAAAA;AALY,KAAD,CAAnB,CAAA;AAQA,IAAA,OAAOU,MAAM,CAACC,MAAP,CAAcH,MAAd,EAAsB;AAAEH,MAAAA,OAAAA;AAAF,KAAtB,CAAP,CAAA;AACD,GAAA;;EAEDR,iBAAiB,CAACH,aAAlB,GAAkCA,aAAlC,CAAA;EACAG,iBAAiB,CAACF,MAAlB,GAA2BA,MAA3B,CAAA;EACAE,iBAAiB,CAACL,OAAlB,GAA4BA,OAA5B,CAAA;AAEA,EAAA,OAAOK,iBAAP,CAAA;AACD;;;;"}