{"version":3,"file":"createMutation.js","sources":["../../src/createMutation.ts"],"sourcesContent":["import type {\n  MutationFunction,\n  MutationKey,\n  UseMutationOptions,\n  UseMutationResult,\n} from '@tanstack/react-query'\nimport { parseMutationArgs, useMutation } from '@tanstack/react-query'\n\nexport interface CreateMutationResult<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void\n> {\n  <TContext>(\n    options?: Omit<\n      UseMutationOptions<TData, TError, TVariables, TContext>,\n      'mutationFn' | 'mutationKey'\n    >\n  ): UseMutationResult<TData, TError, TVariables, TContext>\n  getKey: () => MutationKey | undefined\n  mutationFn: MutationFunction<TData, TVariables>\n}\n\nexport function createMutation<\n  TData = unknown,\n  TVariables = void,\n  TError = unknown,\n  TContext = unknown\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>\n): CreateMutationResult<TData, TError, TVariables>\n\nexport function createMutation<\n  TData = unknown,\n  TVariables = void,\n  TError = unknown,\n  TContext = unknown\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >\n): CreateMutationResult<TData, TError, TVariables>\n\nexport function createMutation<\n  TData = unknown,\n  TVariables = void,\n  TError = unknown,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >\n): CreateMutationResult<TData, TError, TVariables>\n\nexport function createMutation<\n  TData = unknown,\n  TVariables = void,\n  TError = unknown,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >\n): CreateMutationResult<TData, TError, TVariables>\n\nexport function createMutation<\n  TData = unknown,\n  TVariables = void,\n  TError = unknown,\n  TContext = unknown\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>\n): CreateMutationResult<TData, TError, TVariables> {\n  const defaultOptions = parseMutationArgs(arg1, arg2, arg3)\n  const getKey = () => defaultOptions.mutationKey\n\n  function useGeneratedMutation(\n    options?: Omit<\n      UseMutationOptions<TData, TError, TVariables, TContext>,\n      'mutationFn' | 'mutationKey'\n    >\n  ) {\n    return useMutation({\n      ...defaultOptions,\n      ...options,\n    })\n  }\n\n  useGeneratedMutation.getKey = getKey\n  useGeneratedMutation.mutationFn = defaultOptions.mutationFn as NonNullable<\n    MutationFunction<TData, TVariables>\n  >\n\n  return useGeneratedMutation as CreateMutationResult<TData, TError, TVariables>\n}\n"],"names":["createMutation","arg1","arg2","arg3","defaultOptions","parseMutationArgs","getKey","mutationKey","useGeneratedMutation","options","useMutation","mutationFn"],"mappings":";;;;;;AAwEO,SAASA,cAAT,CAMLC,IANK,EAULC,IAVK,EAaLC,IAbK,EAc4C;EACjD,MAAMC,cAAc,GAAGC,4BAAiB,CAACJ,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAAxC,CAAA;;AACA,EAAA,MAAMG,MAAM,GAAG,MAAMF,cAAc,CAACG,WAApC,CAAA;;EAEA,SAASC,oBAAT,CACEC,OADF,EAKE;AACA,IAAA,OAAOC,sBAAW,CAAC,EACjB,GAAGN,cADc;MAEjB,GAAGK,OAAAA;AAFc,KAAD,CAAlB,CAAA;AAID,GAAA;;EAEDD,oBAAoB,CAACF,MAArB,GAA8BA,MAA9B,CAAA;AACAE,EAAAA,oBAAoB,CAACG,UAArB,GAAkCP,cAAc,CAACO,UAAjD,CAAA;AAIA,EAAA,OAAOH,oBAAP,CAAA;AACD;;;;"}