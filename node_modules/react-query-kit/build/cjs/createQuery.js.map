{"version":3,"file":"createQuery.js","sources":["../../src/createQuery.tsx"],"sourcesContent":["import type {\n  QueryFunction,\n  SetDataOptions,\n  UseQueryOptions,\n  UseQueryResult,\n} from '@tanstack/react-query'\nimport { useQuery } from '@tanstack/react-query'\nimport type { Updater } from '@tanstack/react-query/build/types/packages/query-core/src/utils'\nimport { createBaseQuery } from './createBaseQuery'\nimport type {\n  AdditionalCreateOptions,\n  AdditionalQueryHookOptions,\n  ExposeMethods,\n  QueryKitKey,\n} from './types'\nimport { parseQueryKitArgs } from './utils'\n\ninterface CreateQueryOptions<TFnData, TVariables, Error>\n  extends Omit<\n      UseQueryOptions<TFnData, Error, unknown, QueryKitKey<TVariables>>,\n      'queryKey' | 'queryFn' | 'enabled' | 'select'\n    >,\n    AdditionalCreateOptions<TFnData, TVariables> {}\n\ntype QueryHookOptions<TFnData, Error, TData, TVariables> = Omit<\n  UseQueryOptions<TFnData, Error, TData, QueryKitKey<TVariables>>,\n  'queryKey' | 'queryFn' | 'enabled'\n> &\n  AdditionalQueryHookOptions<TFnData, TVariables>\n\ninterface QueryHook<TFnData, TVariables = void, Error = unknown>\n  extends ExposeMethods<TFnData, TVariables> {\n  <TData = TFnData>(\n    options: TVariables extends void\n      ? QueryHookOptions<TFnData, Error, TData, TVariables> | void\n      : QueryHookOptions<TFnData, Error, TData, TVariables>\n  ): UseQueryResult<TData, Error> & {\n    setData: (\n      updater: Updater<TFnData | undefined, TFnData>,\n      options?: SetDataOptions | undefined\n    ) => TFnData | undefined\n  }\n}\n\nexport function createQuery<TFnData, TVariables = void, Error = unknown>(\n  options: CreateQueryOptions<TFnData, TVariables, Error>\n): QueryHook<TFnData, TVariables, Error>\n\nexport function createQuery<TFnData, TVariables = void, Error = unknown>(\n  primaryKey: string,\n  options?: Omit<CreateQueryOptions<TFnData, TVariables, Error>, 'primaryKey'>\n): QueryHook<TFnData, TVariables, Error>\n\nexport function createQuery<TFnData, TVariables = void, Error = unknown>(\n  primaryKey: string,\n  queryFn: QueryFunction<TFnData, QueryKitKey<TVariables>>,\n  options?: Omit<\n    CreateQueryOptions<TFnData, TVariables, Error>,\n    'primaryKey' | 'queryFn'\n  >\n): QueryHook<TFnData, TVariables, Error>\n\nexport function createQuery<TFnData, TVariables = void, Error = unknown>(\n  arg1: any,\n  arg2?: any,\n  arg3?: any\n): QueryHook<TFnData, TVariables, Error> {\n  const options = parseQueryKitArgs(arg1, arg2, arg3)\n  return createBaseQuery(options, useQuery) as QueryHook<\n    TFnData,\n    TVariables,\n    Error\n  >\n}\n"],"names":["createQuery","arg1","arg2","arg3","options","parseQueryKitArgs","createBaseQuery","useQuery"],"mappings":";;;;;;;;AA8DO,SAASA,WAAT,CACLC,IADK,EAELC,IAFK,EAGLC,IAHK,EAIkC;EACvC,MAAMC,OAAO,GAAGC,uBAAiB,CAACJ,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAAjC,CAAA;AACA,EAAA,OAAOG,+BAAe,CAACF,OAAD,EAAUG,mBAAV,CAAtB,CAAA;AAKD;;;;"}