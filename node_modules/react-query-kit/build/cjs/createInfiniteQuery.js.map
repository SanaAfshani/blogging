{"version":3,"file":"createInfiniteQuery.js","sources":["../../src/createInfiniteQuery.ts"],"sourcesContent":["import type {\n  InfiniteData,\n  QueryFunction,\n  SetDataOptions,\n  UseInfiniteQueryOptions,\n  UseInfiniteQueryResult,\n} from '@tanstack/react-query'\nimport { useInfiniteQuery } from '@tanstack/react-query'\nimport type { Updater } from '@tanstack/react-query/build/types/packages/query-core/src/utils'\nimport { createBaseQuery } from './createBaseQuery'\nimport type {\n  AdditionalCreateOptions,\n  AdditionalQueryHookOptions,\n  ExposeMethods,\n  QueryKitKey,\n} from './types'\nimport { parseQueryKitArgs } from './utils'\n\ninterface CreateInfiniteQueryOptions<TFnData, TVariables, Error>\n  extends Omit<\n      UseInfiniteQueryOptions<\n        TFnData,\n        Error,\n        unknown,\n        TFnData,\n        QueryKitKey<TVariables>\n      >,\n      'queryKey' | 'queryFn' | 'enabled' | 'select'\n    >,\n    AdditionalCreateOptions<TFnData, TVariables> {}\n\ntype InfiniteQueryHookOptions<TFnData, Error, TData, TVariables> = Omit<\n  UseInfiniteQueryOptions<\n    TFnData,\n    Error,\n    TData,\n    TFnData,\n    QueryKitKey<TVariables>\n  >,\n  'queryKey' | 'queryFn' | 'enabled'\n> &\n  AdditionalQueryHookOptions<TFnData, TVariables>\n\ninterface InfiniteQueryHook<TFnData, TVariables = void, Error = unknown>\n  extends ExposeMethods<TFnData, TVariables> {\n  <TData = TFnData>(\n    options: TVariables extends void\n      ? InfiniteQueryHookOptions<TFnData, Error, TData, TVariables> | void\n      : InfiniteQueryHookOptions<TFnData, Error, TData, TVariables>\n  ): UseInfiniteQueryResult<TData, Error> & {\n    setData: (\n      updater: Updater<\n        InfiniteData<TFnData> | undefined,\n        InfiniteData<TFnData> | undefined\n      >,\n      options?: SetDataOptions\n    ) => InfiniteData<TFnData> | undefined\n  }\n}\n\nexport function createInfiniteQuery<\n  TFnData,\n  TVariables = void,\n  Error = unknown\n>(\n  options: CreateInfiniteQueryOptions<TFnData, TVariables, Error>\n): InfiniteQueryHook<TFnData, TVariables, Error>\n\nexport function createInfiniteQuery<\n  TFnData,\n  TVariables = void,\n  Error = unknown\n>(\n  primaryKey: string,\n  options?: Omit<\n    CreateInfiniteQueryOptions<TFnData, TVariables, Error>,\n    'primaryKey'\n  >\n): InfiniteQueryHook<TFnData, TVariables, Error>\n\nexport function createInfiniteQuery<\n  TFnData,\n  TVariables = void,\n  Error = unknown\n>(\n  primaryKey: string,\n  queryFn: QueryFunction<TFnData, QueryKitKey<TVariables>>,\n  options?: Omit<\n    CreateInfiniteQueryOptions<TFnData, TVariables, Error>,\n    'primaryKey' | 'queryFn'\n  >\n): InfiniteQueryHook<TFnData, TVariables, Error>\n\nexport function createInfiniteQuery<\n  TFnData,\n  TVariables = void,\n  Error = unknown\n>(\n  arg1: any,\n  arg2?: any,\n  arg3?: any\n): InfiniteQueryHook<TFnData, TVariables, Error> {\n  const options = parseQueryKitArgs(arg1, arg2, arg3)\n  return createBaseQuery(options, useInfiniteQuery) as InfiniteQueryHook<\n    TFnData,\n    TVariables,\n    Error\n  >\n}\n"],"names":["createInfiniteQuery","arg1","arg2","arg3","options","parseQueryKitArgs","createBaseQuery","useInfiniteQuery"],"mappings":";;;;;;;;AA6FO,SAASA,mBAAT,CAKLC,IALK,EAMLC,IANK,EAOLC,IAPK,EAQ0C;EAC/C,MAAMC,OAAO,GAAGC,uBAAiB,CAACJ,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAAjC,CAAA;AACA,EAAA,OAAOG,+BAAe,CAACF,OAAD,EAAUG,2BAAV,CAAtB,CAAA;AAKD;;;;"}