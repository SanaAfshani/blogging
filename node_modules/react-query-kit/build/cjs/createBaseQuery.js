'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var reactQuery = require('@tanstack/react-query');

function createBaseQuery(options, hook) {
  const {
    primaryKey,
    queryFn,
    ...defaultOptions
  } = options;

  const getPrimaryKey = () => primaryKey;

  const getKey = variables => typeof variables === 'undefined' ? [primaryKey] : [primaryKey, variables];

  function useGeneratedQuery(options) {
    const {
      variables,
      ...restOptions
    } = options || {};
    const queryKey = getKey(variables);
    const {
      enabled,
      ...mergedOptions
    } = { ...defaultOptions,
      ...restOptions,
      queryFn,
      queryKey
    };
    const queryClient = reactQuery.useQueryClient({
      context: mergedOptions.context
    });

    const setData = (updater, options) => queryClient.setQueryData(queryKey, updater, options);

    const result = hook({ ...mergedOptions,
      enabled: typeof enabled === 'function' ? enabled(queryClient.getQueryData(queryKey)) : enabled
    });
    return Object.assign(result, {
      setData
    });
  }

  useGeneratedQuery.getPrimaryKey = getPrimaryKey;
  useGeneratedQuery.getKey = getKey;
  useGeneratedQuery.queryFn = queryFn;
  return useGeneratedQuery;
}

exports.createBaseQuery = createBaseQuery;
//# sourceMappingURL=createBaseQuery.js.map
